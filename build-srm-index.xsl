<?xml version="1.0" ?>

<!DOCTYPE stylesheet [

<!-- Location of the RSS icon -->
<!ENTITY rss-icon-uri "http://www.dcache.org/images/rss-icon-14x14.png" >
]>

<xsl:stylesheet version="1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:output method="html"
	      doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN"
	      doctype-system="http://www.w3.org/TR/html4/loose.dtd"
	      />

  <xsl:template match="/">
    <xsl:text>&#x0a;</xsl:text>
    <xsl:comment>This webpage is autogenerated: DO NOT EDIT THIS FILE.</xsl:comment>
    <xsl:text>&#x0a;</xsl:text>
    <xsl:text>&#x0a;</xsl:text>
    <xsl:apply-templates select="download-page"/>
  </xsl:template>


  <!--
      Emit a webpage.
  -->
  <xsl:template match="download-page">
    <html xmlns="http://www.w3.org/1999/xhtml">
      <xsl:text>&#x0a;&#x09;</xsl:text>
      <head>
	<xsl:text>&#x09;</xsl:text>
	<xsl:comment>#include virtual="/template/default-head.shtml"</xsl:comment>
	<xsl:text>&#x0a;&#x09;</xsl:text>
	<title><xsl:value-of select="@title"/></title>
<!--	<xsl:call-template name="emit-head-rss-links"/> -->
	<xsl:text>&#x0a;&#x09;</xsl:text>
      </head>

      <xsl:text>&#x0a;&#x09;</xsl:text>
      <body>
	<xsl:text>&#x0a;&#x09;</xsl:text>
	<xsl:comment>navi</xsl:comment>
	<xsl:text>&#x0a;&#x09;</xsl:text>
	<xsl:comment>#include virtual="/template/l1-header.shtml"</xsl:comment>
	<xsl:text>&#x0a;&#x09;</xsl:text>
	<xsl:comment>body part</xsl:comment>
	<xsl:text>&#x0a;&#x09;</xsl:text>
	<p></p>
	<xsl:text>&#x0a;&#x09;</xsl:text>

	  <xsl:apply-templates select="preamble"/>
	  <xsl:text>&#x0a;&#x09;</xsl:text>
	  <h2>Downloads</h2>
	  <xsl:text>&#x0a;&#x09;</xsl:text>
	  <p></p>
	  <xsl:text>&#x0a;&#x09;</xsl:text>
	  <xsl:apply-templates select="series"/>

          <xsl:apply-templates select="postamble"/>

	  <xsl:comment>#include virtual="/template/frags/footer.shtml"</xsl:comment>
	  <xsl:text>&#x0a;</xsl:text>

      </body>
    </html>
  </xsl:template>


  <xsl:template match="preamble">
    <xsl:apply-templates select="*" mode="copying"/>
  </xsl:template>

  <xsl:template match="postamble">
    <xsl:apply-templates select="*" mode="copying"/>
  </xsl:template>


  <xsl:template match="series">
    <xsl:choose>
      <xsl:when test="@id">
      <a name="{@id}"> </a>
	<xsl:text>&#x0a;&#x09;</xsl:text>
	  <h3>
	    <a name="{@id}">
	    <xsl:value-of select="title"/>
</a>
	    <xsl:text>&#x0a;&#x09;</xsl:text>
	    <xsl:call-template name="emit-rss-icon"/>

	  </h3>
      </xsl:when>
      <xsl:otherwise>
	<xsl:text>&#x0a;&#x09;</xsl:text>
	<h3><xsl:value-of select="title"/></h3>
      </xsl:otherwise>
    </xsl:choose>

	<xsl:text>&#x0a;&#x09;</xsl:text>

    <xsl:apply-templates select="description" mode="series.description"/>
    <xsl:apply-templates select="releases" mode="series.releases"/>
    <xsl:apply-templates select="end-note" mode="series.end-note"/>
  </xsl:template>


  <xsl:template match="description" mode="series.description">
    <xsl:apply-templates select="*" mode="copying"/>
  </xsl:template>

  <xsl:template match="end-note" mode="series.end-note">
    <xsl:apply-templates select="*" mode="copying"/>
  </xsl:template>


  <xsl:template name="emit-rss-icon">
    <xsl:param name="filename">
      <xsl:call-template name="build-rss-filename"/>
    </xsl:param>

    <xsl:param name="title">
      <xsl:call-template name="build-rss-title"/>
    </xsl:param>

    <a href="{$filename}" type="application/rss+xml">
      <img class="rss-icon" src="&rss-icon-uri;" alt="RSS"
	   title="{$title}"/>
    </a>
  </xsl:template>


  <xsl:template name="build-rss-filename">
    <xsl:value-of select="concat('rss-',@id,'-releases.xml')"/>
  </xsl:template>


  <xsl:template name="build-rss-title">
    <xsl:value-of select="concat('RSS feed for dCache ', title, ' releases')"/>
  </xsl:template>


  <xsl:template match="releases" mode="series.releases">
    <table class="releases">
      <thead>
	<xsl:text>&#x0a;</xsl:text>
        <tr>
          <xsl:text>&#x0a;&#x09;</xsl:text><th>Download</th>
          <xsl:text>&#x0a;&#x09;</xsl:text><th>Rel. Date</th>
          <xsl:text>&#x0a;&#x09;</xsl:text><th>md5 hash</th>
          <xsl:text>&#x0a;&#x09;</xsl:text><th>Release notes</th>
        </tr>
      </thead>

      <tbody>
        <xsl:apply-templates select="release" mode="series.releases"/>
      </tbody>
    </table>
    <br />
    <xsl:text>&#x0a;&#x09;</xsl:text>
  </xsl:template>

  <xsl:template match="release" mode="series.releases">
    <xsl:apply-templates select="package" mode="series.releases"/>
  </xsl:template>


  <xsl:template match="package" mode="series.releases">

    <tr>
      <xsl:if test="count(preceding-sibling::package) = 0">
	<xsl:attribute name="id">
<!-- <xsl:value-of select="concat(../../../@id,'-',../@version)"/> -->

      <xsl:value-of select="concat(../../version-prefix,../@version)"/>
	</xsl:attribute>
      </xsl:if>
      <xsl:attribute name="class">
	<xsl:choose>
	  <xsl:when test="../@recommended">
	    <xsl:text>rec</xsl:text>
	  </xsl:when>
	  <xsl:when test="count(../preceding-sibling::release) mod 2">
	    <xsl:text>odd</xsl:text>
	  </xsl:when>
	  <xsl:otherwise>
	    <xsl:text>even</xsl:text>
	  </xsl:otherwise>
	</xsl:choose>
      </xsl:attribute>

      <xsl:text>&#x0a;&#x09;</xsl:text>
      <td class="link">
	<a>
	  <xsl:attribute name="href">
	    <xsl:call-template name="emit-package-url"/>
	  </xsl:attribute>
	  <xsl:call-template name="emit-package-name"/>
	</a>
      </td>

      <xsl:text>&#x0a;&#x09;</xsl:text>
      <td class="date"><xsl:value-of select="../date"/></td>

      <xsl:text>&#x0a;&#x09;</xsl:text>
      <td class="hash"><xsl:value-of select="md5sum"/></td>
      <xsl:if test="position()=1 and not(@suppress-notes)">

	<xsl:text>&#x0a;&#x09;</xsl:text>
	<td class="notes">
	  <xsl:if test="following-sibling::package">
	    <xsl:attribute name="rowspan">
	      <xsl:value-of select="count(following-sibling::package)+1"/>
	    </xsl:attribute>
	  </xsl:if>

	  <xsl:call-template name="emit-notes-link"/>

	</td>
      </xsl:if>
    </tr>
  </xsl:template>


  <xsl:template name="emit-package-name">
    <xsl:call-template name="expand-version">
      <xsl:with-param name="string">
	<xsl:value-of select="concat(../../name,' (',@name,')')"/>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <!-- expand a string by converting VERSION with the context node's
   version.  We assume that the context node is a child of release -->
  <xsl:template name="expand-version">
    <xsl:param name="string"/>

    <xsl:choose>
      <xsl:when test="contains($string,'VERSION')">
	<xsl:value-of select="substring-before($string, 'VERSION')"/>
	<xsl:apply-templates select="ancestor-or-self::release" mode="emit.version"/>
	<xsl:value-of select="substring-after($string, 'VERSION')"/>
      </xsl:when>

      <xsl:otherwise>
	<xsl:value-of select="$string"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="release" mode="emit.version">
    <xsl:value-of select="concat(../version-prefix,@version)"/>
  </xsl:template>





<!-- the package-url contains the package version -->
  <xsl:template name="emit-package-url">
    <xsl:call-template name="expand-pack-version">
      <xsl:with-param name="string">
	<xsl:value-of select="concat(../../download-url-prefix, ../download-url-prefix, download-url)"/>
      </xsl:with-param>
    </xsl:call-template>
  </xsl:template>

  <xsl:template name="expand-pack-version">
    <xsl:param name="string"/>

    <xsl:choose>
      <xsl:when test="contains($string,'VERSION')">
	<xsl:value-of select="substring-before($string, 'VERSION')"/>
	<xsl:apply-templates select="ancestor-or-self::release" mode="emit.pack-version"/>
	<xsl:value-of select="substring-after($string, 'VERSION')"/>
      </xsl:when>

      <xsl:otherwise>
	<xsl:value-of select="$string"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

<!-- antje -->
  <xsl:template match="release" mode="emit.pack-version">
    <xsl:value-of select="concat(../version-prefix,@version,@pack-version)"/>
<!--    <xsl:value-of select="concat(../version-prefix,@version)"/> -->
  </xsl:template>

<!-- the notes-url contains the package version -->
  <xsl:template name="emit-notes-link">
    <xsl:if test="notes-url or ../notes-url or ../../notes-url">
      <a>
	<xsl:attribute name="href">
	  <xsl:call-template name="expand-pack-version">
	    <xsl:with-param name="string">
	      <xsl:apply-templates select="(ancestor-or-self::*/notes-url)[position()=last()]"
				   mode="emit.nodes.url"/>
	    </xsl:with-param>
	  </xsl:call-template>
	</xsl:attribute>
	notes
      </a>
    </xsl:if>
  </xsl:template>

  <!-- Utilities -->

  <!-- Copying mode -->
  <xsl:template match="@*|node()" mode="copying">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" mode="copying"/>
    </xsl:copy>
  </xsl:template>


  <!-- Avoid expanding text nodes -->
  <xsl:template match="text()"/>

</xsl:stylesheet>
