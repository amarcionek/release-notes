HTML header: <title>dCache 4.2 Release Notes</title>
             <!--#include virtual="/template/default-head.shtml" -->
             <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
             <!-- Bootstrap -->
             <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css"
                   integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous"/>
             <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css"
                   integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous"/>
             <!--link type="text/css" rel="stylesheet" href="jquery.tocify.css" /-->
             <style type="text/css">
             h5 {
                 font-size: 15px;
                 font-style: italic;
                 margin-top: 20px;
             }
             body {
                 padding-top: 20px;
             }
             @media (max-width: 767px) {
                 #toc {
                     position: relative;
                     width: 100%;
                     margin: 0px 0px 20px 0px;
                 }
             }
             @media print {
                 #toc {
                     display: none;
                 }
             }
             </style>

<div class="container">
<div id="banner">
   <div id="bird_large">
      <img src="/images/dcache-banner.png" class="bird"></img>
   </div>
   <div id="sidebar-b">
      <span class="dcache-nav-bar">
      <a href="/index.shtml">home</a>
      |
      <a href="/news.shtml">news</a>
      |
      <a href="/manuals/index.shtml">documentation</a>
      |
      <a href="/downloads/IAgree.shtml">downloads</a>
      |
      <a href="/feedback.shtml">feedback</a>
      |
      <a href="/manuals/googlesearch.shtml">search</a>
      |
      <a href="/imprint.shtml">imprint&#160;</a>
      </span>
   </div>
</div>
<div id="content">

<div class="row">

<div class="page-header">
<h1>What's new in dCache 4.2<br/>
<small>Release notes</small></h1>
</div>

## Highlights

This release ships with dCache-View 1.4+ which provides a new version of the
familiar admin pages.  Currently, access to these new pages requires the user
to be authorized (and to assert) the admin role.  The pages are only fully
populated with their respective data when, in addition to the frontend service,
the alarms and history services are running, and the billing service has
the database backend enabled.

With this release, dCache-View completely replaces the (Wicket-based) “webadmin”
interface, which is no longer available on ports 2288 and 8440.  (The
old static pages at http://&lt;host>:2288/old are, on the other hand, still available,
but these, too, will eventually be removed in a future release.)

## Incompatibilities

Some changes
([a11ec8d76b](https://github.com/dCache/dcache/commit/a11ec8d76b549e3e1de948e2848d73d86725029e),
[887d8d5738](https://github.com/dCache/dcache/commit/887d8d5738c6e2c554af8cd14e9ff8028b5e0573) and
[2ff49b600c](https://github.com/dCache/dcache/commit/2ff49b600c5f7e24148596a8a70f26af0bdd12ea)
) in the current release require that Pool Manager, Space Manager and Door
instances must be updated to 4.2 at the same time. For users that wish to do incremental
updates, pools may remain at 4.1 during that update.

## Acknowledgments

The dCache team thanks Christoph Anton Mitterer, Martin Johnki, Onno Zweers and Johannes Thurn
for their pull requests and contributions.

## Release 4.2.0

### Admin

The admin sshd server supports public key and password authentication mechanisms.
Some facilities, however, have security policies that explicitly disallow
these mechanisms.
This release adds the kerberos authentication mechanism to the admin sshd server and
introduces the ability to enable specific authentication mechanism(s) to conform to
different security policies. The following configuration variables
have been added to control the behavior:

```
admin.ssh.authn.enabled = kerberos,password,publickey
```

(password and publickey are enabled by default). If kerberos
authentication is chosen, there is a second configuration variable pointing at
the location of the keytab file on your system:

```
admin.ssh.authn.kerberos.keytab-file = /etc/krb5.keytab
```

### Frontend

The JSON returned from the RESTful admin services now sorts lists (especially
things like pool names) in natural ascending order for improved readability.
Swagger annotations for these services have been improved and regularized.
If the history service is not running, the absence of data is now handled
peacefully.  Finally, when a mover is killed via the frontend, but the
transfer has already completed, the cached entry is now correctly invalidated;
an intervening request for the mover listings from the frontend should display
any killed mover's state as "CANCELED" until it is in fact removed from the
cache during the ensuing refresh (to get this correct behavior, however,
the pools must also be updated to 4.1.9 or better).

As mentioned above, this release includes a version of dcache-view (1.4.2)
which implements the full set of admin pages.

#### Events

With this release, frontend includes a pluggable framework to support
events, plus an example plugin: metronome.

The framework uses Server-Sent Events (SSE) to deliver events.  It
also includes a management framework for creating the SSE endpoint,
discovering which kinds of events are supported, a managing which
events are of interest.

A typical client first creates _a channel_.  This is the SSE endpoint
through which the client will receive information about events.
Channels are user-specific and require authentication.  Clients should
not share channels: a connected client is disconnected if another
client connects to this channel.

Each event has some basic metadata, such as an _event type_, and some
event data.  An event type is a label that describes broadly similar
events.  All event data for events from the same event type have the
same schema, which may be queried.

Events from the SYSTEM event type are sent to all clients, but other
events are only sent if a channel is subscribed to those events.  A
_subscription_ is when the client expresses an interest in some events
being delivered to a channel.  Each subscription has a single
_selector_ which acts as a filter, describing which events should be
delivered.  The format of a selector depends on the event source and
the schema for each event source is available.

The metronome plugin allows a client to receive a regular stream of
simple text event.

Here is a simple illustration of this working.  In this example, an
X.509 credential is used.  Note that any supported authentication may
be used instead.

First, requesting a channel:

```
paul@celebrimbor:~$ curl -D- -E /tmp/x509up_u1000 -X POST https://prometheus.desy.de:3880/api/v1/events/channels/
HTTP/1.1 201 Created
Date: Tue, 26 Jun 2018 16:35:42 GMT
Server: dCache/4.3.0-SNAPSHOT
Location: https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, DELETE, PUT
Access-Control-Allow-Headers: Content-Type, Authorization, Suppress-WWW-Authenticate
Content-Length: 0

paul@celebrimbor:~$
```

The Location response header contains the channel.  The channel allows
the client to receive events:

```
paul@celebrimbor:~$ curl -E /tmp/x509up_u1000 -H 'Accept: text/event-stream' https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw
```

This command does not return, but receives events according to the
Server-Sent Events (SSE) standard.  For more details, see
https://www.w3.org/TR/eventsource/

Using a seperate terminal, we can create a subscription to start
receiving events:

```
paul@celebrimbor:~$ curl -D- -E /tmp/x509up_u1000 -X POST -H 'Content-Type: application/json' -d '{"delay": 2, "message": "event ${count}"}' https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw/subscriptions/metronome
HTTP/1.1 201 Created
Date: Tue, 26 Jun 2018 16:41:17 GMT
Server: dCache/4.3.0-SNAPSHOT
Location: https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw/subscriptions/metronome/b969ccbf-2ba0-4f93-b249-3ce9554fb3f5
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, DELETE, PUT
Access-Control-Allow-Headers: Content-Type, Authorization, Suppress-WWW-Authenticate
Content-Length: 0

paul@celebrimbor:~$
```

The JSON entity sent with the POST request is the selector for this
subscription and the URL targets the event-source: `metronome`.

The client listening for events will now begin to receive events:

```
paul@celebrimbor:~$ curl -E /tmp/x509up_u1000 -H 'Accept: text/event-stream' https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw
event: metronome
id: 0
data: {"event":"event 1","subscription":"https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw/subscriptions/metronome/b969ccbf-2ba0-4f93-b249-3ce9554fb3f5"}

event: metronome
id: 1
data: {"event":"event 2","subscription":"https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw/subscriptions/metronome/b969ccbf-2ba0-4f93-b249-3ce9554fb3f5"}

event: metronome
id: 2
data: {"event":"event 3","subscription":"https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw/subscriptions/metronome/b969ccbf-2ba0-4f93-b249-3ce9554fb3f5"}

event: metronome
id: 3
data: {"event":"event 4","subscription":"https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw/subscriptions/metronome/b969ccbf-2ba0-4f93-b249-3ce9554fb3f5"}
```

The subscription may be deleted if these events are no longer of interest.

```
paul@celebrimbor:~$ curl -D- -E /tmp/x509up_u1000 -X DELETE https://prometheus.desy.de:3880/api/v1/events/channels/AgW3_cnbrAQ8a0vjfZSwOw/subscriptions/metronome/b969ccbf-2ba0-4f93-b249-3ce9554fb3f5
HTTP/1.1 204 No Content
Date: Tue, 26 Jun 2018 16:41:51 GMT
Server: dCache/4.3.0-SNAPSHOT
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, DELETE, PUT
Access-Control-Allow-Headers: Content-Type, Authorization, Suppress-WWW-Authenticate

paul@celebrimbor:~$
```

After this, the channel will stop receiving metronome events.

A channel may have many concurrent subscriptions, even different
subscriptions from the same event source.  It is possible for a client
to discover which channels have been requested, and which
subscriptions have been made per channel.

One further point to note: a channel that does not have a client
connected for an extended period will be deleted automatically.

### FTP

The GridFTP door (by default) tries to establish data connections
directly between the client site and the pool.  Ultimately, this is
under the clients control: the client can issue commands that force
dCache to proxy data connections.

The MODE-E extension allows data to flow over multiple TCP connections
and for those connections to be reused across multiple transfers.
This makes it harder to know the current status of a FTP session's
proxy.

To help alleviated this problem, the `info` admin command now shows an
ASCII-art rendition of the current data transfers.  The door's proxy
is represented by a box, showing the door's client-facing and
pool-facing IP address and port numbers.

The corresponding remote IP address and port numbers for the pool and
the client are also shown, along with the current status of the TCP
connections using the following scheme:

| Symbol        | Meaning
|:-------------:| -------------
| `========`    | Establish
| `--<--<--`    | Half-closed (data flowing to the left)
| `-->-->--`    | Half-closed (data flowing to the right)
| `........`    | Closed

Here is an example, showing the status half-way through transferring a
file with `globus-url-copy` using the options `-no-g2 -p 5`

```
[prometheus] (GFTP-prometheus-AAVvh9jceUg@dCacheDomain) admin > info
     User Host  : 131.169.214.58
          User  : paul
[...]
    Proxy status:
              Client        +---------------------Adapter---------------------+        Pool
131.169.214.58:39233========| 131.169.5.149:21218         131.169.5.149:37083 |========131.169.5.149:40000
131.169.214.58:39237========| 131.169.5.149:21218                             |
131.169.214.58:39236========| 131.169.5.149:21218                             |
131.169.214.58:39234========| 131.169.5.149:21218                             |
131.169.214.58:39235========| 131.169.5.149:21218                             |
                            +-------------------------------------------------+
TCP states: "========" means Established
GFTP-prometheus-AAVvh9jceUg@dCacheDoma[...]Receiving;12982;

[prometheus] (GFTP-prometheus-AAVvh9jceUg@dCacheDomain) admin >
```

### NFS

For situations where transfers stay in pending state in the nfs door, two new admin commands
are added that allow telling doors to 'forget' the transfer or retry it:

```
 transfer retry
 transfer forget
```

Such situations can be result of network errors or when
cell communicatioin tunnels get restarted due to core domain restart.

Some deployments may have quite a busy export nfs file. To make it more manageable, starting with
release 4.2, dCache supports reading multiple export files from an exports.d directory.
The configuration property ```nfs.export.dir``` controls the location of the
directory. By default, **/etc/exports.d** is used. Only files ending in .exports are considered.
Files beginning with a dot are considered hidden and ignored.

### PNFS Manager

The internal pnfsid <=> inumber cache can be configured to run in the cluster mode, e.g. multiple PnfsManagers
can share the same cache.  However, as this functionality is not required by current release cluster
configuration is not enabled.

### Poolmanager

The `psu remove pool` command now supports globbing, i.e. wildcard
characters can be used to refer to a set of pools to act upon:
```
psu remove pool dcache-pool-A*
```

### Resilience

Three issues of some importance have been addressed.

First, Resilience no longer will (incorrectly) report on non-resilient
files which have been corrupted.

Second, the computation of the number of copies needed when a storage
requirement changes was fixed so that it is now possible to go from N to M
and have resilience react correctly (by removing all but M; in particular,
the case where M = 1 was not being handled at all).

Finally, in connection with the latter, the default 'required' value on storage
units has been changed from 1 to undefined.  The only resulting behavioral change
is that resilience will now completely ignore files with the default storage
unit tag rather than alarming when no copies are readable.  '-required=1' is
different in that resilience will instead raise an alarm if the single copy
is not accessible.  This change creates a clearer distinction between
resilient and non-resilient files.

### WebDAV

### XRootD

Since 4.1.0 Apache-Kafka has been introduced as a possibility to publish Billing messagies to Kafka. 
When Kafka enabled these events could be consumed outside from dCache.
Similarly  to 4.1.0 in  4.2.0 Kafka could be enabled for xrootD by setting the folowing properties:

`xrootD.enable.kafka` controls whether the Kafka messaging system is used for message deliver.
`xrootD.enable.kafka = true|false` `xrootD.kafka.bootstrap-servers= host1:port,host2:port`.



### Changelog from 4.1.0 to 4.2.0

<!-- git log 4.1..4.2 -no-merges -format='[%h](https://github.com/dcache/dcache/commit/%H)%n:   %s%n' -->

(tbd as soon as the branching is done)



</div>
</div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js" type="text/javascript"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"
        integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>

<script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
